/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,4],$V2=[1,5],$V3=[1,13],$V4=[1,14],$V5=[1,17],$V6=[1,29],$V7=[1,22],$V8=[1,23],$V9=[1,27],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,28],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[2,5,7,12,20,21,24,26,30,45,48,50,51,53,54,55,56,59,62,63,64,65,66],$Vk=[1,53],$Vl=[1,50],$Vm=[1,52],$Vn=[1,55],$Vo=[1,56],$Vp=[1,61],$Vq=[1,62],$Vr=[1,83],$Vs=[1,78],$Vt=[1,73],$Vu=[1,75],$Vv=[1,74],$Vw=[1,76],$Vx=[1,77],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,84],$VD=[1,85],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[2,10,30,32,47,51],$VJ=[10,11],$VK=[1,114],$VL=[1,135],$VM=[1,136],$VN=[1,120],$VO=[1,121],$VP=[1,122],$VQ=[1,123],$VR=[1,124],$VS=[1,125],$VT=[1,126],$VU=[1,127],$VV=[1,128],$VW=[1,129],$VX=[1,130],$VY=[1,131],$VZ=[1,132],$V_=[1,133],$V$=[1,134],$V01=[10,11,33,37,38,43,44,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],$V11=[11,37],$V21=[2,5,7,12,20,21,24,26,30,45,46,48,50,51,53,54,55,56,59,62,63,64,65,66],$V31=[10,11,33,37,38,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81],$V41=[1,195],$V51=[10,37],$V61=[10,11,33,37,38,67,68,73,74,75,76,77,78,79,80,81],$V71=[10,11,33,37,38,67,68,69,71,72,73,74,75,76,77,78,79,80,81],$V81=[10,11,33,37,38,73,74,75,76,77,78,79,80,81],$V91=[1,228],$Va1=[10,33,37],$Vb1=[50,51,53],$Vc1=[33,37];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"LINS":4,"EOF":5,"INSTRUCC":6,"Rprintln":7,"parA":8,"EXP":9,"parC":10,"pcoma":11,"Rprint":12,"DECLARAR":13,"ASIGNAR":14,"IF":15,"DOWHILE":16,"WHILE":17,"FOR":18,"SWITCH":19,"Rbreak":20,"Rcontinue":21,"METODOS":22,"LLAMADA":23,"RUNMETOD":24,"RETORNAR":25,"Rreturn":26,"LST_IDS":27,"DECLARACION_INDV":28,"TIPO":29,"ID":30,"igual":31,"corA":32,"corC":33,"Rnew":34,"LST_EXP":35,"AUXVECTOR":36,"coma":37,"dosPun":38,"BODY":39,"Rvoid":40,"PARAMETROS":41,"INCorDEC":42,"inc":43,"dec":44,"Rif":45,"Relse":46,"llavA":47,"Rswitch":48,"LCASOS":49,"Rdefault":50,"llavC":51,"ELSEIF":52,"Rcase":53,"Rdo":54,"Rwhile":55,"Rfor":56,"ACTUALIZAR":57,"L_EXP":58,"Rrun":59,"parc":60,"CASTEO":61,"Rint":62,"Rstring":63,"Rchar":64,"Rboolean":65,"Rdouble":66,"mas":67,"menos":68,"mul":69,"pot":70,"div":71,"mod":72,"min":73,"max":74,"notEquals":75,"equals":76,"minEqual":77,"maxEqual":78,"and":79,"or":80,"opt":81,"not":82,"Cadena":83,"Char":84,"entero":85,"decimal":86,"lit_boleanV":87,"lit_boleanF":88,"RtoStr":89,"RtoLower":90,"RtoUpper":91,"Rround":92,"Rlength":93,"Rtypeof":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"Rprintln",8:"parA",10:"parC",11:"pcoma",12:"Rprint",20:"Rbreak",21:"Rcontinue",24:"RUNMETOD",26:"Rreturn",30:"ID",31:"igual",32:"corA",33:"corC",34:"Rnew",37:"coma",38:"dosPun",40:"Rvoid",43:"inc",44:"dec",45:"Rif",46:"Relse",47:"llavA",48:"Rswitch",50:"Rdefault",51:"llavC",53:"Rcase",54:"Rdo",55:"Rwhile",56:"Rfor",58:"L_EXP",59:"Rrun",60:"parc",62:"Rint",63:"Rstring",64:"Rchar",65:"Rboolean",66:"Rdouble",67:"mas",68:"menos",69:"mul",70:"pot",71:"div",72:"mod",73:"min",74:"max",75:"notEquals",76:"equals",77:"minEqual",78:"maxEqual",79:"and",80:"or",81:"opt",82:"not",83:"Cadena",84:"Char",85:"entero",86:"decimal",87:"lit_boleanV",88:"lit_boleanF",89:"RtoStr",90:"RtoLower",91:"RtoUpper",92:"Rround",93:"Rlength",94:"Rtypeof"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,5],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,2],[6,2],[25,3],[25,2],[25,2],[13,1],[13,1],[28,4],[28,2],[28,10],[28,8],[28,15],[28,10],[27,3],[27,5],[27,4],[27,6],[27,3],[22,6],[22,6],[22,4],[22,7],[22,7],[22,5],[22,6],[41,4],[41,2],[41,2],[14,3],[14,2],[14,6],[14,9],[14,3],[42,1],[42,1],[15,5],[15,7],[15,7],[15,3],[19,10],[19,7],[19,9],[19,3],[52,5],[52,7],[52,3],[49,4],[49,5],[49,3],[16,6],[16,3],[17,5],[17,3],[18,9],[18,9],[18,3],[39,3],[39,2],[39,3],[57,3],[57,2],[57,2],[23,3],[23,4],[23,4],[23,5],[23,2],[61,4],[61,3],[29,1],[29,1],[29,1],[29,1],[29,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,5],[9,3],[9,2],[9,2],[9,2],[9,2],[9,1],[9,1],[9,1],[9,3],[9,4],[9,4],[9,7],[9,1],[9,1],[9,1],[9,1],[9,3],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[36,5],[36,3],[36,2],[35,3],[35,1],[35,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=new AST_Node("RAIZ","RAIZ","palabra reservada","global",this.$first_line,this._$.last_column);this.$.addHijos($$[$0-1]);return this.$
break;
case 2:
$$[$0-1].addHijos($$[$0]);this.$=$$[$0-1];
break;
case 3:
this.$= new AST_Node("SENTENCIAS","SENTENCIAS","SENTENCIAS","global",this._$.first_line,this._$.last_column);
                      this.$.addHijos($$[$0]);
break;
case 4:
this.$= new AST_Node("PRINTLN","PRINTLN"); this.$.addHijos($$[$0-2]);
break;
case 5:
this.$= new AST_Node("PRINT","PRINT"); this.$.addHijos($$[$0-2]);
break;
case 6: case 7: case 9: case 13: case 14: case 16:
this.$=$$[$0-1]
break;
case 8: case 10: case 11: case 12: case 15: case 17: case 18:
this.$=$$[$0]
break;
case 19: case 20:

     console.log("Sintactico","Error en : '"+yytext+"'",
     this._$.first_line,this._$.first_column);
     console.log("Se recupero en ",yytext," (",this._$.last_line,",",this._$.last_column,")");
     TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida" ,this._$.first_line,this._$.first_column));
break;
case 21:
this.$= new AST_Node("RETURN","RETURN"); this.$.addHijos(new AST_Node("return","return","return","return",this._$.first_line,this._$.first_column) ,$$[$0-1]) 
break;
case 22:
this.$= new AST_Node("RETURN","RETURN"); this.$.addHijos(new AST_Node("return","return","return","return",this._$.first_line,this._$.first_column)) 
break;
case 23:
console.log("Se recupero en ",yytext," (", this._$.last_line,", ", this._$.last_column,")");
      TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para un return " ,this._$.first_line,this._$.first_column));
break;
case 24:
this.$ = $$[$0]
break;
case 25:
this.$= $$[$0]
break;
case 26:
this.$= new AST_Node("DECLARACION_INDV","DECLARACION_INDV"); this.$.addHijos(new AST_Node("ID",$$[$0-2],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column),$$[$0])
break;
case 27:
this.$= new AST_Node("DECLARACION_INDV","DECLARACION_INDV"); this.$.addHijos(new AST_Node("ID",$$[$0],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column))
break;
case 28:
this.$= new AST_Node("DECLARACION_INDV","DECLARACION_INDV");$$[$0-4] = new AST_Node("NEW","NEW",$$[$0-3],"NEW",this._$.first_line,this._$.first_column) ;
      $$[$0-4].addHijos($$[$0-1]);this.$.addHijos(new AST_Node("ID",$$[$0-8],$$[$0-9],"VECTOR",this._$.first_line,this._$.first_column),new AST_Node("VECTOR1D","VECTOR1D"),$$[$0-4])
break;
case 29:
this.$= new AST_Node("DECLARACION_INDV","DECLARACION_INDV"); $$[$0-1].tipo = tipo_variable;this.$.addHijos(new AST_Node("ID",$$[$0-6],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column),new AST_Node("VECTOR1D","VECTOR1D"),$$[$0-1])
break;
case 30:
this.$= new AST_Node("DECLARACION_INDV","DECLARACION_INDV");$$[$0-7] = new AST_Node("NEW","NEW",$$[$0-6],"NEW",this._$.first_line,this._$.first_column) ;
      $$[$0-7].addHijos($$[$0-4],$$[$0-1]);this.$.addHijos(new AST_Node("ID",$$[$0-13],tipo_variable,"VECTOR",this._$.first_line,this._$.first_column),new AST_Node("VECTOR2D","VECTOR2D"),$$[$0-7])
break;
case 31:
this.$= new AST_Node("DECLARACION_INDV","DECLARACION_INDV"); this.$.addHijos(new AST_Node("ID",$$[$0-8],tipo_variable,"VECTOR",this._$.first_line,this._$.first_column),new AST_Node("VECTOR1D","VECTOR1D"),$$[$0-1])
break;
case 32:
$$[$0-2].addHijos(new AST_Node("ID",$$[$0],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column)); this.$=$$[$0-2];
break;
case 33:
$$[$0-4].addHijos(new AST_Node("ID",$$[$0-2],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column),$$[$0]); this.$=$$[$0-4];
break;
case 34:
this.$= new AST_Node("ID_LIST","ID_LIST"); this.$.addHijos(new AST_Node("ID",$$[$0-2],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column));this.$.addHijos(new AST_Node("ID",$$[$0],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column))
break;
case 35:
this.$= new AST_Node("ID_LIST","ID_LIST"); this.$.addHijos(new AST_Node("ID",$$[$0-4],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column));this.$.addHijos(new AST_Node("ID",$$[$0-2],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column , $$[$0]))
break;
case 36:
console.log("Se recupero en ",yytext," (", this._$.last_line,", ", this._$.last_column,")"); TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para una lista de variables" ,this._$.first_line,this._$.first_column));
break;
case 37:
this.$= new AST_Node("METODOS","METODOS"); this.$.addHijos(new AST_Node("ID",$$[$0-5],tipo_variable,"",this._$.first_line,this._$.last_column), $$[$0-1],$$[$0]);
break;
case 38:
this.$= new AST_Node("METODOS","METODOS"); this.$.addHijos(new AST_Node("ID",$$[$0-5],"void","",this._$.first_line,this._$.last_column), $$[$0-1],$$[$0]);
break;
case 39:
this.$= new AST_Node("METODOS","METODOS"); this.$.addHijos(new AST_Node("ID",$$[$0-3],"void","",this._$.first_line,this._$.last_column), $$[$0]);
break;
case 40:
this.$= new AST_Node("METODOS","METODOS"); this.$.addHijos(new AST_Node("ID",$$[$0-6],tipo_variable,"",this._$.first_line,this._$.last_column),$$[$0-4], $$[$0-1],$$[$0]);
break;
case 41:
this.$= new AST_Node("METODOS","METODOS"); this.$.addHijos(new AST_Node("ID",$$[$0-6],"void","",this._$.first_line,this._$.last_column),$$[$0-4], $$[$0-1],$$[$0]);
break;
case 42:
this.$= new AST_Node("METODOS","METODOS"); this.$.addHijos(new AST_Node("ID",$$[$0-4],"void","",this._$.first_line,this._$.last_column), $$[$0-2],$$[$0]);
break;
case 43:
console.log("Se recupero en ",yytext," (", this._$.last_line,", ", this._$.last_column,")"); TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para un metodo" ,this._$.first_line,this._$.first_column));
break;
case 44:
 $$[$0-3].addHijos($$[$0-1], new AST_Node("ID",$$[$0-3],"ID","",this._$.first_line,this._$.last_column)); this.$=$$[$0-3]
break;
case 45:
this.$= new AST_Node("PARAMETROS","PARAMETROS"); this.$.addHijos($$[$0-1],new AST_Node("ID",$$[$0-1],tipo_variable,"",this._$.first_line,this._$.last_column));
break;
case 46:
TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para parametros" ,this._$.first_line,this._$.first_column));
break;
case 47:
this.$= new AST_Node("ASIGNAR","ASIGNAR"); this.$.addHijos(new AST_Node("ID",$$[$0-2],"ID","",this._$.first_line,this._$.last_column),$$[$0]);
break;
case 48:
this.$= new AST_Node("ASIGNAR","ASIGNAR");$$[$0].addHijos(new AST_Node("ID",$$[$0-1],"ID","",this._$.first_line,this._$.last_column));this.$.addHijos(new AST_Node("ID",$$[$0-1],"ID","",this._$.first_line,this._$.last_column),$$[$0]);
break;
case 49:
this.$= new AST_Node("ASIGNAR","ASIGNAR"); this.$.addHijos(new AST_Node("ID",$$[$0-5],"ID","",this._$.first_line,this._$.last_column),$$[$0-3],$$[$0]);
break;
case 50:
this.$= new AST_Node("ASIGNAR","ASIGNAR"); this.$.addHijos(new AST_Node("ID",$$[$0-8],"ID","",this._$.first_line,this._$.last_column),$$[$0-6],$$[$0-3],$$[$0]);
break;
case 51:
console.log("Se recupero en ",yytext," (", this._$.last_line,", ", this._$.last_column,")"); TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para una asignacion" ,this._$.first_line,this._$.first_column));
break;
case 52: case 53:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("incdes",$$[$0],"incdes","incdes",this._$.first_line,this._$.last_column));
break;
case 54:
this.$= new AST_Node("IF","IF"); this.$.addHijos($$[$0-2],$$[$0]);
break;
case 55:
this.$= new AST_Node("IF","IF");$$[$0-1]= new AST_Node("ELSE","ELSE");$$[$0-1].addHijos($$[$0]); this.$.addHijos($$[$0-4],$$[$0-2],$$[$0-1]);
break;
case 56:
this.$= new AST_Node("IF","IF");$$[$0-1]= new AST_Node("ELSEIF","ELSEIF");$$[$0-1].addHijos($$[$0]); this.$.addHijos($$[$0-4],$$[$0-2],$$[$0-1]);
break;
case 57:
console.log("Se recupero en ",yytext," (", this._$.last_line,", ", this._$.last_column,")"); TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para un if" ,this._$.first_line,this._$.first_column));
break;
case 58:
this.$= new AST_Node("SWITCH","SWITCH");$$[$0-3] =new AST_Node("DEFAULT","DEFAULT");$$[$0-3].addHijos($$[$0-1]); this.$.addHijos($$[$0-7],$$[$0-4],$$[$0-3]);
break;
case 59:
this.$= new AST_Node("SWITCH","SWITCH"); this.$.addHijos($$[$0-4],$$[$0-1]);
break;
case 60:
this.$= new AST_Node("SWITCH","SWITCH");$$[$0-3] =new AST_Node("DEFAULT","DEFAULT");$$[$0-3].addHijos($$[$0-1]) ; this.$.addHijos($$[$0-6],$$[$0-3]);
break;
case 61:
console.log("Se recupero en ",yytext," (", this._$.last_line,", ", this._$.last_column,")"); TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para un switch" ,this._$.first_line,this._$.first_column));
break;
case 62:
this.$= new AST_Node("ELSEIF","ELSEIF"); this.$.addHijos($$[$0-2],$$[$0]);
break;
case 63:
this.$= $$[$0-6]; this.$.addHijos($$[$0-2],$$[$0]);
break;
case 64:
TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para un else if" ,this._$.first_line,this._$.first_column));
break;
case 65:
this.$= new AST_Node("CASE","CASE"); this.$.addHijos($$[$0-2],$$[$0]);
break;
case 66:
this.$= $$[$0-4]; this.$.addHijos($$[$0-2],$$[$0]);
break;
case 67:
console.log("Se recupero en ",yytext," (", this._$.last_line,", ", this._$.last_column,")");TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para un case" ,this._$.first_line,this._$.first_column));
break;
case 68:
this.$= new AST_Node("WHILE","WHILE"); this.$.addHijos($$[$0-4],$$[$0-1]);
break;
case 69:
console.log("Se recupero en ",yytext," (", this._$.last_line,", ", this._$.last_column,")");TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para un do while" ,this._$.first_line,this._$.first_column));
break;
case 70:
this.$= new AST_Node("WHILE","WHILE"); this.$.addHijos($$[$0-2],$$[$0]);
break;
case 71:
console.log("Se recupero en ",yytext," (", this._$.last_line,", ", this._$.last_column,")");TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para un while" ,this._$.first_line,this._$.first_column));
break;
case 72: case 73:
this.$= new AST_Node("FOR","FOR"); this.$.addHijos($$[$0-6],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 74:
console.log("Se recupero en ",yytext," (", this._$.last_line,", ", this._$.last_column,")"); TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para un for" ,this._$.first_line,this._$.first_column));
break;
case 75:
this.$= new AST_Node("BODY","BODY"); this.$.addHijos($$[$0-1]);  
break;
case 76:
this.$= new AST_Node("BODY","BODY"); this.$.addHijos(new AST_Node("body_null","body_null"));  
break;
case 77:
console.log("Se recupero en ",yytext," (", this._$.last_line,", ", this._$.last_column,")"); TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para el codigo interno de un metodo" ,this._$.first_line,this._$.first_column));
break;
case 78:
this.$= new AST_Node("ACTUALIZAR","ACTUALIZAR"); this.$.addHijos(new AST_Node("ID",$$[$0-2],"ID","",this._$.first_line,this._$.last_column),$$[$0]);  
break;
case 79:
this.$= new AST_Node("ACTUALIZAR","ACTUALIZAR"); this.$.addHijos(new AST_Node("ID",$$[$0-1],"ID","",this._$.first_line,this._$.last_column),new AST_Node("INCDEC",$$[$0],"INCDEC","",this._$.first_line,this._$.last_column));  
break;
case 80:
console.log("Se recupero en ",yytext," (", this._$.last_line,", ", this._$.last_column,")"); TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para una nueva actualizacion" ,this._$.first_line,this._$.first_column));
break;
case 81:
this.$= new AST_Node("LLAMADA","LLAMADA"); this.$.addHijos(new AST_Node("ID",$$[$0-2],"ID","LLAMADA",this._$.first_line,this._$.last_column));  
break;
case 82:
this.$= new AST_Node("LLAMADA","LLAMADA"); this.$.addHijos(new AST_Node("ID",$$[$0-3],"ID","LLAMADA",this._$.first_line,this._$.last_column),$$[$0-1]);  
break;
case 83:
this.$= new AST_Node("RUN","RUN"); this.$.addHijos(new AST_Node("ID_RUN",$$[$0-3],"ID_RUN","LLAMADA",this._$.first_line,this._$.last_column));  
break;
case 84:
this.$= new AST_Node("RUN","RUN"); this.$.addHijos(new AST_Node("ID_RUN",$$[$0-4],"ID_RUN","LLAMADA",this._$.first_line,this._$.last_column),$$[$0-1]);  
break;
case 85:
TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para una llamada" ,this._$.first_line,this._$.first_column));
break;
case 86:
this.$= new AST_Node("CASTEO","CASTEO"); this.$.addHijos(new AST_Node("TIPO",$$[$0-2],$$[$0-2],"CASTEO",this._$.first_line,this._$.last_column),$$[$0]);  
break;
case 87:
console.log("Se recupero en ",yytext," (", this._$.last_line,", ", this._$.last_column,")"); TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para un casteo" ,this._$.first_line,this._$.first_column));
break;
case 88:
tipo_variable = "int" ; this.$=$$[$0];
break;
case 89:
tipo_variable = "string" ; this.$=$$[$0];
break;
case 90:
tipo_variable = "char" ; this.$=$$[$0]
break;
case 91:
tipo_variable = "boolean" ; this.$=$$[$0];
break;
case 92:
tipo_variable = "double" ; this.$=$$[$0]
break;
case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106:
this.$= new AST_Node("EXP","EXP");this.$.addHijos($$[$0-2],new AST_Node("op",$$[$0-1],"op","op",this._$.first_line,this._$.last_column),$$[$0]);
break;
case 107:
this.$= new AST_Node("TERNARIO","TERNARIO");this.$.addHijos($$[$0-4],new AST_Node("opt",$$[$0-3],"opt","opt",this._$.first_line,this._$.last_column),$$[$0-2],$$[$0]);
break;
case 108:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("op",$$[$0-1],"op","op",this._$.first_line,this._$.last_column));
break;
case 109: case 110:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("op",$$[$0],"op","op",this._$.first_line,this._$.last_column),$$[$0-1]);
break;
case 111: case 112:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("op",$$[$0-1],"op","op",this._$.first_line,this._$.last_column) , $$[$0]);
break;
case 113:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("string",$$[$0],"string","string",this._$.first_line,this._$.last_column));
break;
case 114:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("char",$$[$0],"char","char",this._$.first_line,this._$.last_column));
break;
case 115:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("ID",$$[$0],"ID","ID",this._$.first_line,this._$.last_column));
break;
case 116:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("ID",$$[$0-2],"ID","ID",this._$.first_line,this._$.last_column));
break;
case 117: case 118:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("ID",$$[$0-3],"ID","ID",this._$.first_line,this._$.last_column), $$[$0-1]);
break;
case 119:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("ID",$$[$0-6],"ID","ID",this._$.first_line,this._$.last_column),$$[$0-4], $$[$0-1]);
break;
case 120:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("entero",$$[$0],"entero","entero",this._$.first_line,this._$.last_column));
break;
case 121:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("numero",$$[$0],"numero","numero",this._$.first_line,this._$.last_column));
break;
case 122:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("true",$$[$0],"true","true",this._$.first_line,this._$.last_column));
break;
case 123:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("false",$$[$0],"false","false",this._$.first_line,this._$.last_column));
break;
case 124:
this.$= new AST_Node("EXP","EXP");this.$.addHijos($$[$0-1]);
break;
case 125:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("cast",$$[$0-2],"cast","cast",this._$.first_line,this._$.last_column), $$[$0]);
break;
case 126:
this.$= new AST_Node("EXP","EXP");$$[$0-3]=new AST_Node("toStr",$$[$0-3],"toStr","toStr",this._$.first_line,this._$.last_column);$$[$0-3].addHijos($$[$0-1]) ;this.$.addHijos($$[$0-3]);
break;
case 127:
this.$= new AST_Node("EXP","EXP");$$[$0-3]=new AST_Node("toLower",$$[$0-3],"toLower","toLower",this._$.first_line,this._$.last_column);$$[$0-3].addHijos($$[$0-1]) ;this.$.addHijos($$[$0-3]);
break;
case 128:
this.$= new AST_Node("EXP","EXP");$$[$0-3]=new AST_Node("toUpper",$$[$0-3],"toUpper","toUpper",this._$.first_line,this._$.last_column);$$[$0-3].addHijos($$[$0-1]) ;this.$.addHijos($$[$0-3]);
break;
case 129:
this.$= new AST_Node("EXP","EXP");$$[$0-3]=new AST_Node("round",$$[$0-3],"round","round",this._$.first_line,this._$.last_column);$$[$0-3].addHijos($$[$0-1]) ;this.$.addHijos($$[$0-3]);
break;
case 130:
this.$= new AST_Node("EXP","EXP");$$[$0-3]=new AST_Node("leng",$$[$0-3],"leng","leng",this._$.first_line,this._$.last_column);$$[$0-3].addHijos($$[$0-1]) ;this.$.addHijos($$[$0-3]);
break;
case 131:
this.$= new AST_Node("EXP","EXP");$$[$0-3]=new AST_Node("typeOf",$$[$0-3],"typeOf","typeOf",this._$.first_line,this._$.last_column);$$[$0-3].addHijos($$[$0-1]) ;this.$.addHijos($$[$0-3]);
break;
case 132:
$$[$0-4].addHijos($$[$0-1]) ; this.$=$$[$0-4]
break;
case 133:
this.$= new AST_Node("AUXVECTOR","AUXVECTOR"); this.$.addHijos($$[$0-1]);  
break;
case 134:
TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para un vector" ,this._$.first_line,this._$.first_column));
break;
case 135:
$$[$0-2].addHijos($$[$0]) ; this.$=$$[$0-2]
break;
case 136:
this.$= new AST_Node("LST_EXP","LST_EXP","LST_EXP",this._$.first_line,this._$.first_column); this.$.addHijos($$[$0]);  
break;
case 137:
TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida para una lista de expresiones" ,this._$.first_line,this._$.first_column));
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,45:$V8,48:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},{1:[3]},{2:$V0,5:[1,36],6:37,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,45:$V8,48:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},o($Vj,[2,3]),{8:[1,38]},{8:[1,39]},{11:[1,40]},{11:[1,41]},o($Vj,[2,8]),{11:[1,42]},o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),{11:[1,43]},{11:[1,44]},o($Vj,[2,15]),{11:[1,45]},o($Vj,[2,17]),o($Vj,[2,18]),{2:$V0,6:46,7:$V1,11:[1,47],12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,45:$V8,48:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,60:[1,48],62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},{11:[2,24],37:[1,49]},{11:[2,25]},{2:$Vk,8:[1,54],31:$Vl,32:$Vm,42:51,43:$Vn,44:$Vo},{2:[1,58],8:[1,57]},{2:[1,60],39:59,47:$Vp,51:$Vq},{2:[1,64],8:[1,63]},{2:[1,66],8:[1,65]},{2:[1,68],8:[1,67]},{30:[1,69]},{2:[1,72],8:$Vr,9:70,11:[1,71],30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{2:[1,91],30:[1,90]},o($VI,[2,88]),o($VI,[2,89]),o($VI,[2,90]),o($VI,[2,91]),o($VI,[2,92]),{1:[2,1]},o($Vj,[2,2]),{8:$Vr,9:92,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:93,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,9]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,16]),o($Vj,[2,19]),o($Vj,[2,20]),{11:[2,85]},{30:[1,94]},{8:$Vr,9:95,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},o($VJ,[2,48]),{8:$Vr,9:96,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{11:[1,97]},{2:[1,100],10:[1,98],29:102,41:99,58:[1,101],62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},o($VJ,[2,52]),o($VJ,[2,53]),{8:$Vr,9:103,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{47:[1,104]},{55:[1,105]},{11:[1,106]},{2:$V0,4:107,6:3,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,45:$V8,48:$V9,51:[1,108],54:$Va,55:$Vb,56:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},{2:[1,109]},{8:$Vr,9:110,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{10:[1,111]},{13:113,14:112,27:20,28:21,29:30,30:$VK,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},{51:[1,115]},{8:$Vr,9:116,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{51:[1,117]},{8:[1,118]},{11:[1,119],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($Vj,[2,22]),o($Vj,[2,23]),{8:$Vr,9:137,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:138,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:139,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},o($V01,[2,113]),o($V01,[2,114]),o($V01,[2,115],{8:[1,140],32:[1,141]}),o($V01,[2,120]),o($V01,[2,121]),o($V01,[2,122]),o($V01,[2,123]),{8:$Vr,9:142,29:143,30:$Vs,32:$Vt,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:[1,144]},{8:[1,145]},{8:[1,146]},{8:[1,147]},{8:[1,148]},{8:[1,149]},{11:[2,27],31:[1,151],32:[1,152],37:[1,150]},{11:[1,153]},{10:[1,154],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{10:[1,155],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($V11,[2,32],{31:[1,156]}),o($VJ,[2,47],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$}),{33:[1,157],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($VJ,[2,51]),{11:[2,81],38:[1,158],39:159,47:$Vp,51:$Vq},{10:[1,160],37:[1,161]},{30:[1,163],38:[1,162]},{10:[1,164]},{30:[1,165]},{10:[1,166],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($Vj,[2,57]),{8:[1,167]},{11:[2,69]},{2:$V0,6:37,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,45:$V8,48:$V9,51:[1,168],54:$Va,55:$Vb,56:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},o($V21,[2,76]),{51:[1,169]},{10:[1,170],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($Vj,[2,71]),{11:[1,171]},{11:[1,172]},{2:$Vk,31:$Vl,32:$Vm,42:51,43:$Vn,44:$Vo},o($Vj,[2,74]),{10:[1,173],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($Vj,[2,61]),{10:[1,174],58:[1,175]},o($Vj,[2,21]),{8:$Vr,9:176,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:177,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:178,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:179,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:180,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:181,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:182,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:183,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:184,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:185,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:186,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:187,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:188,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:189,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:190,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},o($V01,[2,109]),o($V01,[2,110]),{33:[1,191],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($V31,[2,111],{43:$VL,44:$VM}),o($V31,[2,112],{43:$VL,44:$VM}),{2:$V41,8:$Vr,9:194,10:[1,192],30:$Vs,32:$Vt,35:193,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:196,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{10:[1,197],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{10:[1,198]},{8:$Vr,9:199,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:200,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:201,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:202,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:203,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:204,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{30:[1,205]},{8:$Vr,9:206,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{33:[1,207]},o($V11,[2,36]),{11:[1,208]},{11:[1,209]},{8:$Vr,9:210,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{31:[1,211],32:[1,212]},{29:213,40:[1,214],62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},o($Vj,[2,39]),{38:[1,215],39:216,47:$Vp,51:$Vq},{29:217,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},{29:218,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},o($V51,[2,46]),{11:[2,82]},o($V51,[2,45]),{39:219,47:$Vp,51:$Vq},{8:$Vr,9:220,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},o($V21,[2,75]),o($V21,[2,77]),{39:221,47:$Vp,51:$Vq},{8:$Vr,9:222,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:223,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{47:[1,224]},{11:[2,83]},{10:[1,225]},o($V61,[2,93],{43:$VL,44:$VM,69:$VP,70:$VQ,71:$VR,72:$VS}),o($V61,[2,94],{43:$VL,44:$VM,69:$VP,70:$VQ,71:$VR,72:$VS}),o($V71,[2,95],{43:$VL,44:$VM,70:$VQ}),o($V71,[2,96],{43:$VL,44:$VM}),o($V71,[2,97],{43:$VL,44:$VM,70:$VQ}),o($V71,[2,98],{43:$VL,44:$VM,70:$VQ}),o($V81,[2,99],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),o($V81,[2,100],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),o($V81,[2,101],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),o($V81,[2,102],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),o($V81,[2,103],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),o($V81,[2,104],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS}),o([10,11,33,37,38,79,80,81],[2,105],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY}),o([10,11,33,37,38,80,81],[2,106],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ}),{38:[1,226],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($V01,[2,108]),o($V01,[2,116]),{10:[1,227],37:$V91},o($Va1,[2,136],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$}),{37:[1,229]},{33:[1,230],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($V01,[2,124]),{8:$Vr,9:231,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{10:[1,232],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{10:[1,233],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{10:[1,234],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{10:[1,235],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{10:[1,236],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{10:[1,237],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($V11,[2,34],{31:[1,238]}),{11:[2,26],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{31:[1,239],32:[1,240]},o($Vj,[2,4]),o($Vj,[2,5]),o($V11,[2,33],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$}),{8:$Vr,9:241,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{8:$Vr,9:242,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{39:243,47:$Vp,51:$Vq},{39:244,47:$Vp,51:$Vq},{29:245,40:[1,246],62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},o($Vj,[2,42]),{30:[1,247]},{39:248,47:$Vp,51:$Vq},o($Vj,[2,54],{46:[1,249]}),{10:[1,250],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($Vj,[2,70]),{11:[1,251],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{11:[1,252],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{49:253,50:[1,254],53:[1,255]},{11:[2,84]},{8:$Vr,9:256,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},o($V01,[2,117]),{8:$Vr,9:257,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},o($Va1,[2,137]),o($V01,[2,118],{32:[1,258]}),o($V71,[2,125],{43:$VL,44:$VM,70:$VQ}),o($V01,[2,126]),o($V01,[2,127]),o($V01,[2,128]),o($V01,[2,129]),o($V01,[2,130]),o($V01,[2,131]),{8:$Vr,9:259,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{32:[1,261],34:[1,260]},{33:[1,262]},o($VJ,[2,49],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$}),{33:[1,263],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($Vj,[2,37]),o($Vj,[2,38]),{39:264,47:$Vp,51:$Vq},{39:265,47:$Vp,51:$Vq},o($V51,[2,44]),o($Vj,[2,43]),{15:267,39:266,45:$V8,47:$Vp,51:$Vq},{11:[2,68]},{14:268,30:$VK},{14:269,30:$VK},{50:[1,270],51:[1,271],53:[1,272]},{38:[1,273]},{2:[1,275],8:$Vr,9:274,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},o([10,11,33,37,38],[2,107],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$}),o($Va1,[2,135],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$}),{8:$Vr,9:276,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},o($V11,[2,35],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$}),{29:277,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},{2:$V41,8:$Vr,9:194,30:$Vs,32:$Vt,35:278,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{31:[1,279]},{31:[1,280]},o($Vj,[2,40]),o($Vj,[2,41]),o($Vj,[2,55]),o($Vj,[2,56]),{10:[1,281]},{10:[1,282]},{38:[1,283]},o($Vj,[2,59]),{8:$Vr,9:284,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{2:$V0,4:285,6:3,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,45:$V8,48:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},{38:[1,286],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{10:[1,287]},{33:[1,288],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{32:[1,289]},{33:[1,290],37:$V91},{32:[1,292],34:[1,291]},{8:$Vr,9:293,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{39:294,47:$Vp,51:$Vq},{39:295,47:$Vp,51:$Vq},{2:$V0,4:296,6:3,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,45:$V8,48:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},{38:[1,297],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{2:$V0,6:37,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,45:$V8,48:$V9,51:[1,298],54:$Va,55:$Vb,56:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},{2:$V0,4:299,6:3,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,45:$V8,48:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},o($Vb1,[2,67]),o($V01,[2,119]),{8:$Vr,9:300,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{11:[2,29]},{29:301,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},{2:[1,304],32:[1,303],36:302},o($VJ,[2,50],{43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$}),o($Vj,[2,72]),o($Vj,[2,73]),{2:$V0,6:37,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,45:$V8,48:$V9,51:[1,305],54:$Va,55:$Vb,56:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},{2:$V0,4:306,6:3,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,45:$V8,48:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi},o($Vj,[2,60]),o($Vb1,[2,65],{13:6,14:7,15:8,16:9,17:10,18:11,19:12,22:15,23:16,25:18,27:20,28:21,29:30,6:37,2:$V0,7:$V1,12:$V2,20:$V3,21:$V4,24:$V5,26:$V6,30:$V7,45:$V8,48:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi}),{33:[1,307],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{32:[1,308]},{33:[1,309],37:[1,310]},{2:$V41,8:$Vr,9:194,30:$Vs,32:$Vt,35:311,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{33:[1,312]},o($Vj,[2,58]),o($Vb1,[2,66],{13:6,14:7,15:8,16:9,17:10,18:11,19:12,22:15,23:16,25:18,27:20,28:21,29:30,6:37,2:$V0,7:$V1,12:$V2,20:$V3,21:$V4,24:$V5,26:$V6,30:$V7,45:$V8,48:$V9,54:$Va,55:$Vb,56:$Vc,59:$Vd,62:$Ve,63:$Vf,64:$Vg,65:$Vh,66:$Vi}),{11:[2,28]},{8:$Vr,9:313,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},{11:[2,31]},{32:[1,314]},{33:[1,315],37:$V91},o($Vc1,[2,134]),{33:[1,316],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{2:$V41,8:$Vr,9:194,30:$Vs,32:$Vt,35:317,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},o($Vc1,[2,133]),{32:[1,318]},{33:[1,319],37:$V91},{8:$Vr,9:320,30:$Vs,32:$Vt,68:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz,87:$VA,88:$VB,89:$VC,90:$VD,91:$VE,92:$VF,93:$VG,94:$VH},o($Vc1,[2,132]),{33:[1,321],43:$VL,44:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{11:[2,30]}],
defaultActions: {21:[2,25],36:[2,1],48:[2,85],106:[2,69],164:[2,82],174:[2,83],225:[2,84],250:[2,68],290:[2,29],307:[2,28],309:[2,31],321:[2,30]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {TablaErrores} = require('./Estructuras/ManejoErrores/TablaErrores.js') ;
    const {_Error} = require('./Estructuras/ManejoErrores/_Error.js') ;
    
    
    var cadena =""
    var tipo_variable = ""
    function AST_Node(name, value, tipo,entorno, fila, columna ){
        this.name = name;
        this.value = value;
        this.tipo = tipo;
        this.entorno = entorno;
        this.fila = fila;
        this.columna = columna;

        this.hijos =[];
        this.addHijos = addHijos;    
        this.getHermano = getHermano;

        function addHijos(){
            for(var i=0; i<arguments.length; i++){
                this.hijos.push(arguments[i]);
                if(arguments[i == null]){
                    arguments[i].padre.this;
                }
            }
        }
        function getHermano(pos){
            if(pos>this._hijos.length-1) return null;
            return this._hijos[pos];
        }
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*comentario de linea*/
break;
case 1:/*comentario de BODY*/
break;
case 2:
break;
case 3:return 43;
break;
case 4:return 67;
break;
case 5:return 44;
break;
case 6:return 68;
break;
case 7:return 69;
break;
case 8:return 71;
break;
case 9:return 70;
break;
case 10:return 72;
break;
case 11:return 77
break;
case 12:return 78
break;
case 13:return 75
break;
case 14:return 76
break;
case 15:return 31
break;
case 16:return 73
break;
case 17:return 74
break;
case 18:return 81
break;
case 19:return 80
break;
case 20:return 79
break;
case 21:return 82
break;
case 22:return 8
break;
case 23:return 10
break;
case 24:return 11
break;
case 25:return 38
break;
case 26:return 32
break;
case 27:return 33
break;
case 28:return 47
break;
case 29:return 51
break;
case 30:return 37
break;
case 31:return 'punto'
break;
case 32:return 62
break;
case 33:return 66
break;
case 34:return 64
break;
case 35:return 65
break;
case 36:return 87
break;
case 37:return 88
break;
case 38:return 63
break;
case 39:return 34
break;
case 40:return 20
break;
case 41:return 21
break;
case 42:return 26
break;
case 43:return 55
break;
case 44:return 56
break;
case 45:return 54
break;
case 46:return 40
break;
case 47:return 12
break;
case 48:return 7
break;
case 49:return 90
break;
case 50:return 91
break;
case 51:return 92
break;
case 52:return 93
break;
case 53:return 94
break;
case 54:return 89
break;
case 55:return 'RtoCharArray'
break;
case 56:return 59
break;
case 57:return 45
break;
case 58:return 46
break;
case 59:return 48
break;
case 60:return 53
break;
case 61:return 50
break;
case 62:
break;
case 63:
break;
case 64:return 30;
break;
case 65:return 86;
break;
case 66:return 85;
break;
case 67:cadena="";this.begin("string");
break;
case 68:cadena+=yy_.yytext;
break;
case 69:cadena+="\"";
break;
case 70:cadena+="\n";
break;
case 71:cadena+="\t";
break;
case 72:cadena+="\\";
break;
case 73:cadena+="\'";
break;
case 74:yy_.yytext=cadena; this.popState(); return 83;
break;
case 75: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 84; 
break;
case 76:return 5;
break;
case 77: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        TablaErrores.getInstance().insertarError(new _Error("Lexico","Caracter: \" "+yy_.yytext+"\" no es valido" ,yy_.yylloc.first_line,yy_.yylloc.first_column));
                        return null; 
break;
}
},
rules: [/^(?:\/\/[^\n]*)/i,/^(?:\/\*((^\*)|\*(?!\/))*\*\/)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?::)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:run\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[68,69,70,71,72,73,74],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}