/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,4],$V2=[1,5],$V3=[1,13],$V4=[1,14],$V5=[1,17],$V6=[1,29],$V7=[1,22],$V8=[1,23],$V9=[1,27],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,28],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[2,5,7,12,20,21,24,26,30,47,49,52,53,55,56,57,58,61,63,64,65,66,67],$Vk=[1,47],$Vl=[1,49],$Vm=[1,51],$Vn=[1,52],$Vo=[1,55],$Vp=[1,72],$Vq=[1,67],$Vr=[1,62],$Vs=[1,64],$Vt=[1,63],$Vu=[1,65],$Vv=[1,66],$Vw=[1,68],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,73],$VB=[1,74],$VC=[1,75],$VD=[1,76],$VE=[1,77],$VF=[1,78],$VG=[10,30,32,50],$VH=[10,11],$VI=[1,96],$VJ=[1,115],$VK=[1,116],$VL=[1,100],$VM=[1,101],$VN=[1,102],$VO=[1,103],$VP=[1,104],$VQ=[1,105],$VR=[1,106],$VS=[1,107],$VT=[1,108],$VU=[1,109],$VV=[1,110],$VW=[1,111],$VX=[1,112],$VY=[1,113],$VZ=[1,114],$V_=[10,11,33,38,40,45,46,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],$V$=[11,38],$V01=[2,5,7,12,20,21,24,26,30,47,48,49,52,53,55,56,57,58,61,63,64,65,66,67],$V11=[10,11,33,38,40,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],$V21=[10,38],$V31=[10,11,33,38,40,68,69,74,75,76,77,78,79,80,81,82],$V41=[10,11,33,38,40,68,69,70,72,73,74,75,76,77,78,79,80,81,82],$V51=[10,11,33,38,40,74,75,76,77,78,79,80,81,82],$V61=[1,202],$V71=[10,33,38],$V81=[52,53,55],$V91=[33,38];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"LINS":4,"EOF":5,"INSTRUCC":6,"Rprintln":7,"parA":8,"EXP":9,"parC":10,"pcoma":11,"Rprint":12,"DECLARAR":13,"ASIGNAR":14,"IF":15,"DOWHILE":16,"WHILE":17,"FOR":18,"SWITCH":19,"Rbreak":20,"Rcontinue":21,"METODOS":22,"LLAMADA":23,"RUNMETOD":24,"RETORNAR":25,"Rreturn":26,"LST_IDS":27,"DECLARACION_INDV":28,"TIPO":29,"ID":30,"igual":31,"corA":32,"corC":33,"Rnew":34,"CHARTOARRAY":35,"LST_EXP":36,"AUXVECTOR":37,"coma":38,"RtoCharArray":39,"dosPun":40,"BODY":41,"Rvoid":42,"PARAMETROS":43,"INCorDEC":44,"inc":45,"dec":46,"Rif":47,"Relse":48,"Rswitch":49,"llavA":50,"LCASOS":51,"Rdefault":52,"llavC":53,"ELSEIF":54,"Rcase":55,"Rdo":56,"Rwhile":57,"Rfor":58,"ACTUALIZAR":59,"L_EXP":60,"Rrun":61,"CASTEO":62,"Rint":63,"Rstring":64,"Rchar":65,"Rboolean":66,"Rdouble":67,"mas":68,"menos":69,"mul":70,"pot":71,"div":72,"mod":73,"min":74,"max":75,"notEquals":76,"equals":77,"minEqual":78,"maxEqual":79,"and":80,"or":81,"opt":82,"not":83,"Cadena":84,"Char":85,"entero":86,"decimal":87,"lit_boleanV":88,"lit_boleanF":89,"RtoStr":90,"RtoLower":91,"RtoUpper":92,"Rround":93,"Rlength":94,"Rtypeof":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"Rprintln",8:"parA",10:"parC",11:"pcoma",12:"Rprint",20:"Rbreak",21:"Rcontinue",24:"RUNMETOD",26:"Rreturn",30:"ID",31:"igual",32:"corA",33:"corC",34:"Rnew",38:"coma",39:"RtoCharArray",40:"dosPun",42:"Rvoid",45:"inc",46:"dec",47:"Rif",48:"Relse",49:"Rswitch",50:"llavA",52:"Rdefault",53:"llavC",55:"Rcase",56:"Rdo",57:"Rwhile",58:"Rfor",60:"L_EXP",61:"Rrun",63:"Rint",64:"Rstring",65:"Rchar",66:"Rboolean",67:"Rdouble",68:"mas",69:"menos",70:"mul",71:"pot",72:"div",73:"mod",74:"min",75:"max",76:"notEquals",77:"equals",78:"minEqual",79:"maxEqual",80:"and",81:"or",82:"opt",83:"not",84:"Cadena",85:"Char",86:"entero",87:"decimal",88:"lit_boleanV",89:"lit_boleanF",90:"RtoStr",91:"RtoLower",92:"RtoUpper",93:"Rround",94:"Rlength",95:"Rtypeof"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,5],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[25,3],[25,2],[13,1],[13,1],[28,4],[28,2],[28,10],[28,6],[28,8],[28,15],[28,10],[27,3],[27,5],[27,4],[27,6],[35,4],[22,6],[22,6],[22,4],[22,7],[22,7],[22,5],[43,4],[43,2],[14,3],[14,2],[14,6],[14,9],[44,1],[44,1],[15,5],[15,7],[15,7],[19,10],[19,7],[19,9],[54,5],[54,7],[51,4],[51,5],[16,6],[17,5],[18,9],[18,9],[41,3],[41,2],[59,3],[59,2],[23,3],[23,4],[23,4],[23,5],[62,4],[62,4],[29,1],[29,1],[29,1],[29,1],[29,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,3],[9,5],[9,3],[9,2],[9,2],[9,2],[9,2],[9,1],[9,1],[9,1],[9,3],[9,4],[9,4],[9,7],[9,1],[9,1],[9,1],[9,1],[9,3],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[37,5],[37,3],[36,3],[36,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=new AST_Node("RAIZ","RAIZ","palabra reservada","global",this.$first_line,this._$.last_column);this.$.addHijos($$[$0-1]);return this.$
break;
case 2:
$$[$0-1].addHijos($$[$0]);this.$=$$[$0-1];
break;
case 3:
this.$= new AST_Node("SENTENCIAS","SENTENCIAS","SENTENCIAS","global",this._$.first_line,this._$.last_column);
                      this.$.addHijos($$[$0]);
break;
case 4:
this.$= new AST_Node("PRINTLN","PRINTLN"); this.$.addHijos($$[$0-2]);
break;
case 5:
this.$= new AST_Node("PRINT","PRINT"); this.$.addHijos($$[$0-2]);
break;
case 6: case 7: case 9: case 16:
this.$=$$[$0-1]
break;
case 8: case 10: case 11: case 12: case 15: case 17: case 18:
this.$=$$[$0]
break;
case 13:
this.$=new AST_Node("break","break");
break;
case 14:
this.$=new AST_Node("continue","continue");
break;
case 19:

     console.log("Sintactico","Error en : '"+yytext+"'",
     this._$.first_line,this._$.first_column);
     console.log("Se recupero en ",yytext," (",this._$.last_line,",",this._$.last_column,")");
     TablaErrores.getInstance().insertarError(new _Error("Sintactico","Error en: \" "+yytext+"\" sintaxis no valida" ,this._$.first_line,this._$.first_column));
break;
case 20:
this.$= new AST_Node("RETURN","RETURN"); this.$.addHijos(new AST_Node("return","return","return","return",this._$.first_line,this._$.first_column) ,$$[$0-1]) 
break;
case 21:
this.$= new AST_Node("RETURN","RETURN"); this.$.addHijos(new AST_Node("return","return","return","return",this._$.first_line,this._$.first_column)) 
break;
case 22:
this.$ = $$[$0]
break;
case 23:
this.$= $$[$0]
break;
case 24:
this.$= new AST_Node("DECLARACION_INDV","DECLARACION_INDV"); this.$.addHijos(new AST_Node("ID",$$[$0-2],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column),$$[$0])
break;
case 25:
this.$= new AST_Node("DECLARACION_INDV","DECLARACION_INDV"); this.$.addHijos(new AST_Node("ID",$$[$0],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column))
break;
case 26:
this.$= new AST_Node("DECLARACION_INDV","DECLARACION_INDV");$$[$0-4] = new AST_Node("NEW","NEW",$$[$0-3],"NEW",this._$.first_line,this._$.first_column) ;
      $$[$0-4].addHijos($$[$0-1]);this.$.addHijos(new AST_Node("ID",$$[$0-8],$$[$0-9],"VECTOR",this._$.first_line,this._$.first_column),new AST_Node("VECTOR1D","VECTOR1D"),$$[$0-4])
break;
case 27:
this.$= new AST_Node("DECLARACION_INDV","DECLARACION_INDV");$$[$0-1] = new AST_Node("TOARRAY","TOARRAY",$$[$0-5],"NEW",this._$.first_line,this._$.first_column) ;
      $$[$0-1].addHijos($$[$0]);this.$.addHijos(new AST_Node("ID",$$[$0-4],$$[$0-5],"VECTOR",this._$.first_line,this._$.first_column),new AST_Node("VECTOR1D","VECTOR1D"),$$[$0-1])
break;
case 28:
this.$= new AST_Node("DECLARACION_INDV","DECLARACION_INDV"); $$[$0-1].tipo = tipo_variable;this.$.addHijos(new AST_Node("ID",$$[$0-6],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column),new AST_Node("VECTOR1D","VECTOR1D"),$$[$0-1])
break;
case 29:
this.$= new AST_Node("DECLARACION_INDV","DECLARACION_INDV");$$[$0-7] = new AST_Node("NEW","NEW",$$[$0-6],"NEW",this._$.first_line,this._$.first_column) ;
      $$[$0-7].addHijos($$[$0-4],$$[$0-1]);this.$.addHijos(new AST_Node("ID",$$[$0-13],tipo_variable,"VECTOR",this._$.first_line,this._$.first_column),new AST_Node("VECTOR2D","VECTOR2D"),$$[$0-7])
break;
case 30:
this.$= new AST_Node("DECLARACION_INDV","DECLARACION_INDV"); this.$.addHijos(new AST_Node("ID",$$[$0-8],tipo_variable,"VECTOR",this._$.first_line,this._$.first_column),new AST_Node("VECTOR2D","VECTOR2D"),$$[$0-1])
break;
case 31:
$$[$0-2].addHijos(new AST_Node("ID",$$[$0],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column)); this.$=$$[$0-2];
break;
case 32:
$$[$0-4].addHijos(new AST_Node("ID",$$[$0-2],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column),$$[$0]); this.$=$$[$0-4];
break;
case 33:
this.$= new AST_Node("ID_LIST","ID_LIST"); this.$.addHijos(new AST_Node("ID",$$[$0-2],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column));this.$.addHijos(new AST_Node("ID",$$[$0],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column))
break;
case 34:
this.$= new AST_Node("ID_LIST","ID_LIST"); this.$.addHijos(new AST_Node("ID",$$[$0-4],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column));this.$.addHijos(new AST_Node("ID",$$[$0-2],tipo_variable,"VARIABLE",this._$.first_line,this._$.first_column , $$[$0]))
break;
case 35:
this.$= new AST_Node("EXP","EXP");$$[$0-3]=new AST_Node("charToArray",$$[$0-3],"charToArray","charToArray",this._$.first_line,this._$.last_column);$$[$0-3].addHijos($$[$0-1]) ;this.$.addHijos($$[$0-3]);
break;
case 36:
this.$= new AST_Node("METODOS","METODOS"); this.$.addHijos(new AST_Node("ID",$$[$0-5],tipo_variable,"",this._$.first_line,this._$.last_column), $$[$0-1],$$[$0]);
break;
case 37:
this.$= new AST_Node("METODOS","METODOS"); this.$.addHijos(new AST_Node("ID",$$[$0-5],"void","",this._$.first_line,this._$.last_column), $$[$0-1],$$[$0]);
break;
case 38:
this.$= new AST_Node("METODOS","METODOS"); this.$.addHijos(new AST_Node("ID",$$[$0-3],"void","",this._$.first_line,this._$.last_column), $$[$0]);
break;
case 39:
this.$= new AST_Node("METODOS","METODOS"); this.$.addHijos(new AST_Node("ID",$$[$0-6],tipo_variable,"",this._$.first_line,this._$.last_column),$$[$0-4], $$[$0-1],$$[$0]);
break;
case 40:
this.$= new AST_Node("METODOS","METODOS"); this.$.addHijos(new AST_Node("ID",$$[$0-6],"void","",this._$.first_line,this._$.last_column),$$[$0-4], $$[$0-1],$$[$0]);
break;
case 41:
this.$= new AST_Node("METODOS","METODOS"); this.$.addHijos(new AST_Node("ID",$$[$0-4],"void","",this._$.first_line,this._$.last_column), $$[$0-2],$$[$0]);
break;
case 42:
 $$[$0-3].addHijos($$[$0-1], new AST_Node("ID",$$[$0-3],"ID","",this._$.first_line,this._$.last_column)); this.$=$$[$0-3]
break;
case 43:
this.$= new AST_Node("PARAMETROS","PARAMETROS"); this.$.addHijos($$[$0-1],new AST_Node("ID",$$[$0-1],tipo_variable,"",this._$.first_line,this._$.last_column));
break;
case 44:
this.$= new AST_Node("ASIGNAR","ASIGNAR"); this.$.addHijos(new AST_Node("ID",$$[$0-2],"ID","",this._$.first_line,this._$.last_column),$$[$0]);
break;
case 45:
this.$= new AST_Node("ASIGNAR","ASIGNAR");$$[$0].addHijos(new AST_Node("ID",$$[$0-1],"ID","",this._$.first_line,this._$.last_column));this.$.addHijos(new AST_Node("ID",$$[$0-1],"ID","",this._$.first_line,this._$.last_column),$$[$0]);
break;
case 46:
this.$= new AST_Node("ASIGNAR","ASIGNAR"); this.$.addHijos(new AST_Node("ID",$$[$0-5],"ID","",this._$.first_line,this._$.last_column),$$[$0-3],$$[$0]);
break;
case 47:
this.$= new AST_Node("ASIGNAR","ASIGNAR"); this.$.addHijos(new AST_Node("ID",$$[$0-8],"ID","",this._$.first_line,this._$.last_column),$$[$0-6],$$[$0-3],$$[$0]);
break;
case 48: case 49:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("incdes",$$[$0],"incdes","incdes",this._$.first_line,this._$.last_column));
break;
case 50:
this.$= new AST_Node("IF","IF"); this.$.addHijos($$[$0-2],$$[$0]);
break;
case 51:
this.$= new AST_Node("IF","IF");$$[$0-1]= new AST_Node("ELSE","ELSE");$$[$0-1].addHijos($$[$0]); this.$.addHijos($$[$0-4],$$[$0-2],$$[$0-1]);
break;
case 52:
this.$= new AST_Node("IF","IF");$$[$0-1]= new AST_Node("ELSEIF","ELSEIF");$$[$0-1].addHijos($$[$0]); this.$.addHijos($$[$0-4],$$[$0-2],$$[$0-1]);
break;
case 53:
this.$= new AST_Node("SWITCH","SWITCH");$$[$0-3] =new AST_Node("DEFAULT","DEFAULT");$$[$0-3].addHijos($$[$0-1]); this.$.addHijos($$[$0-7],$$[$0-4],$$[$0-3]);
break;
case 54:
this.$= new AST_Node("SWITCH","SWITCH"); this.$.addHijos($$[$0-4],$$[$0-1]);
break;
case 55:
this.$= new AST_Node("SWITCH","SWITCH");$$[$0-3] =new AST_Node("DEFAULT","DEFAULT");$$[$0-3].addHijos($$[$0-1]) ; this.$.addHijos($$[$0-6],$$[$0-3]);
break;
case 56:
this.$= new AST_Node("ELSEIF","ELSEIF"); this.$.addHijos($$[$0-2],$$[$0]);
break;
case 57:
this.$= $$[$0-6]; this.$.addHijos($$[$0-2],$$[$0]);
break;
case 58:
this.$= new AST_Node("CASE","CASE"); this.$.addHijos($$[$0-2],$$[$0]);
break;
case 59:
this.$= $$[$0-4]; this.$.addHijos($$[$0-2],$$[$0]);
break;
case 60:
this.$= new AST_Node("DOWHILE","DOWHILE"); this.$.addHijos($$[$0-4],$$[$0-1]);
break;
case 61:
this.$= new AST_Node("WHILE","WHILE"); this.$.addHijos($$[$0-2],$$[$0]);
break;
case 62: case 63:
this.$= new AST_Node("FOR","FOR"); this.$.addHijos($$[$0-6],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 64:
this.$= new AST_Node("BODY","BODY"); this.$.addHijos($$[$0-1]);  
break;
case 65:
this.$= new AST_Node("BODY","BODY"); this.$.addHijos(new AST_Node("body_null","body_null"));  
break;
case 66:
this.$= new AST_Node("ACTUALIZAR","ACTUALIZAR"); this.$.addHijos(new AST_Node("ID",$$[$0-2],"ID","",this._$.first_line,this._$.last_column),$$[$0]);  
break;
case 67:
this.$= new AST_Node("ACTUALIZAR","ACTUALIZAR"); this.$.addHijos(new AST_Node("ID",$$[$0-1],"ID","",this._$.first_line,this._$.last_column),new AST_Node("INCDEC",$$[$0],"INCDEC","",this._$.first_line,this._$.last_column));  
break;
case 68:
this.$= new AST_Node("LLAMADA","LLAMADA"); this.$.addHijos(new AST_Node("ID",$$[$0-2],"ID","LLAMADA",this._$.first_line,this._$.last_column));  
break;
case 69:
this.$= new AST_Node("LLAMADA","LLAMADA"); this.$.addHijos(new AST_Node("ID",$$[$0-3],"ID","LLAMADA",this._$.first_line,this._$.last_column),$$[$0-1]);  
break;
case 70:
this.$= new AST_Node("RUN","RUN"); this.$.addHijos(new AST_Node("ID_RUN",$$[$0-3],"ID_RUN","LLAMADA",this._$.first_line,this._$.last_column));  
break;
case 71:
this.$= new AST_Node("RUN","RUN"); this.$.addHijos(new AST_Node("ID_RUN",$$[$0-4],"ID_RUN","LLAMADA",this._$.first_line,this._$.last_column),$$[$0-1]);  
break;
case 72:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("cast",$$[$0-2],$$[$0-2],"cast",this._$.first_line,this._$.last_column), $$[$0]);
break;
case 73:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("cast",$$[$0-2],$$[$0-2],"cast",this._$.first_line,this._$.last_column), new AST_Node("ID",$$[$0-3],"ID","LLAMADA",this._$.first_line,this._$.last_column));
break;
case 74:
tipo_variable = "int" ; this.$=$$[$0].toLowerCase();
break;
case 75:
tipo_variable = "string" ; this.$=$$[$0].toLowerCase();
break;
case 76:
tipo_variable = "char" ; this.$=$$[$0].toLowerCase()
break;
case 77:
tipo_variable = "boolean" ; this.$=$$[$0].toLowerCase();
break;
case 78:
tipo_variable = "double" ; this.$=$$[$0].toLowerCase()
break;
case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92:
this.$= new AST_Node("EXP","EXP");this.$.addHijos($$[$0-2],new AST_Node("op",$$[$0-1],"op","op",this._$.first_line,this._$.last_column),$$[$0]);
break;
case 93:
this.$= new AST_Node("TERNARIO","TERNARIO");this.$.addHijos($$[$0-4],new AST_Node("opt",$$[$0-3],"opt","opt",this._$.first_line,this._$.last_column),$$[$0-2],$$[$0]);
break;
case 94:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("op",$$[$0-1],"op","op",this._$.first_line,this._$.last_column));
break;
case 95: case 96:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("op",$$[$0],"op","op",this._$.first_line,this._$.last_column),$$[$0-1]);
break;
case 97: case 98:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("op",$$[$0-1],"op","op",this._$.first_line,this._$.last_column) , $$[$0]);
break;
case 99:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("string",$$[$0],"string","string",this._$.first_line,this._$.last_column));
break;
case 100:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("char",$$[$0],"char","char",this._$.first_line,this._$.last_column));
break;
case 101:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("ID",$$[$0],"ID","ID",this._$.first_line,this._$.last_column));
break;
case 102:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("ID",$$[$0-2],"ID","ID",this._$.first_line,this._$.last_column));
break;
case 103: case 104:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("ID",$$[$0-3],"ID","ID",this._$.first_line,this._$.last_column), $$[$0-1]);
break;
case 105:
this.$= new AST_Node("EXPVECTOR","EXPVECTOR");this.$.addHijos(new AST_Node("ID",$$[$0-6],"ID","ID",this._$.first_line,this._$.last_column),$$[$0-4], $$[$0-1]);
break;
case 106:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("entero",$$[$0],"entero","entero",this._$.first_line,this._$.last_column));
break;
case 107:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("numero",$$[$0],"numero","numero",this._$.first_line,this._$.last_column));
break;
case 108:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("true",$$[$0],"true","true",this._$.first_line,this._$.last_column));
break;
case 109:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("false",$$[$0],"false","false",this._$.first_line,this._$.last_column));
break;
case 110:
this.$= new AST_Node("EXP","EXP");this.$.addHijos($$[$0-1]);
break;
case 111:
this.$= new AST_Node("EXP","EXP");this.$.addHijos(new AST_Node("cast",$$[$0-2],"cast","cast",this._$.first_line,this._$.last_column), $$[$0]);
break;
case 112:
this.$= new AST_Node("EXP","EXP");$$[$0-3]=new AST_Node("toStr",$$[$0-3],"toStr","toStr",this._$.first_line,this._$.last_column);$$[$0-3].addHijos($$[$0-1]) ;this.$.addHijos($$[$0-3]);
break;
case 113:
this.$= new AST_Node("EXP","EXP");$$[$0-3]=new AST_Node("toLower",$$[$0-3],"toLower","toLower",this._$.first_line,this._$.last_column);$$[$0-3].addHijos($$[$0-1]) ;this.$.addHijos($$[$0-3]);
break;
case 114:
this.$= new AST_Node("EXP","EXP");$$[$0-3]=new AST_Node("toUpper",$$[$0-3],"toUpper","toUpper",this._$.first_line,this._$.last_column);$$[$0-3].addHijos($$[$0-1]) ;this.$.addHijos($$[$0-3]);
break;
case 115:
this.$= new AST_Node("EXP","EXP");$$[$0-3]=new AST_Node("round",$$[$0-3],"round","round",this._$.first_line,this._$.last_column);$$[$0-3].addHijos($$[$0-1]) ;this.$.addHijos($$[$0-3]);
break;
case 116:
this.$= new AST_Node("EXP","EXP");$$[$0-3]=new AST_Node("leng",$$[$0-3],"leng","leng",this._$.first_line,this._$.last_column);$$[$0-3].addHijos($$[$0-1]) ;this.$.addHijos($$[$0-3]);
break;
case 117:
this.$= new AST_Node("EXP","EXP");$$[$0-3]=new AST_Node("typeOf",$$[$0-3],"typeOf","typeOf",this._$.first_line,this._$.last_column);$$[$0-3].addHijos($$[$0-1]) ;this.$.addHijos($$[$0-3]);
break;
case 118:
$$[$0-4].addHijos($$[$0-1]) ; this.$=$$[$0-4]
break;
case 119:
this.$= new AST_Node("AUXVECTOR","AUXVECTOR"); this.$.addHijos($$[$0-1]);  
break;
case 120:
$$[$0-2].addHijos($$[$0]) ; this.$=$$[$0-2]
break;
case 121:
this.$= new AST_Node("LST_EXP","LST_EXP","LST_EXP",this._$.first_line,this._$.first_column); this.$.addHijos($$[$0]);  
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,47:$V8,49:$V9,56:$Va,57:$Vb,58:$Vc,61:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{1:[3]},{2:$V0,5:[1,36],6:37,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,47:$V8,49:$V9,56:$Va,57:$Vb,58:$Vc,61:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($Vj,[2,3]),{8:[1,38]},{8:[1,39]},{11:[1,40]},{11:[1,41]},o($Vj,[2,8]),{11:[1,42]},o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),{11:[1,43]},{11:[1,44]},o($Vj,[2,15]),{11:[1,45]},o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),{11:[2,22],38:[1,46]},{11:[2,23]},{8:[1,50],31:$Vk,32:$Vl,44:48,45:$Vm,46:$Vn},{8:[1,53]},{41:54,50:$Vo},{8:[1,56]},{8:[1,57]},{8:[1,58]},{30:[1,59]},{8:$Vp,9:60,11:[1,61],30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{30:[1,79]},o($VG,[2,74]),o($VG,[2,75]),o($VG,[2,76]),o($VG,[2,77]),o($VG,[2,78]),{1:[2,1]},o($Vj,[2,2]),{8:$Vp,9:80,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:81,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,9]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,16]),{30:[1,82]},{8:$Vp,9:83,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},o($VH,[2,45]),{8:$Vp,9:84,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{10:[1,85],29:88,43:86,60:[1,87],63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($VH,[2,48]),o($VH,[2,49]),{8:$Vp,9:89,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{57:[1,90]},{2:$V0,4:91,6:3,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,47:$V8,49:$V9,53:[1,92],56:$Va,57:$Vb,58:$Vc,61:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{8:$Vp,9:93,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{13:95,14:94,27:20,28:21,29:30,30:$VI,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{8:$Vp,9:97,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:[1,98]},{11:[1,99],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},o($Vj,[2,21]),{8:$Vp,9:117,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:118,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:119,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},o($V_,[2,99]),o($V_,[2,100]),o($V_,[2,101],{8:[1,120],32:[1,121]}),o($V_,[2,106]),o($V_,[2,107]),o($V_,[2,108]),o($V_,[2,109]),{8:$Vp,9:122,29:123,30:$Vq,32:$Vr,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:[1,124]},{8:[1,125]},{8:[1,126]},{8:[1,127]},{8:[1,128]},{8:[1,129]},{11:[2,25],31:[1,131],32:[1,132],38:[1,130]},{10:[1,133],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{10:[1,134],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},o($V$,[2,31],{31:[1,135]}),o($VH,[2,44],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ}),{33:[1,136],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{11:[2,68],40:[1,137],41:138,50:$Vo},{10:[1,139],38:[1,140]},{10:[1,141]},{30:[1,142]},{10:[1,143],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{8:[1,144]},{2:$V0,6:37,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,47:$V8,49:$V9,53:[1,145],56:$Va,57:$Vb,58:$Vc,61:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($V01,[2,65]),{10:[1,146],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{11:[1,147]},{11:[1,148]},{31:$Vk,32:$Vl,44:48,45:$Vm,46:$Vn},{10:[1,149],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{10:[1,150],60:[1,151]},o($Vj,[2,20]),{8:$Vp,9:152,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:153,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:154,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:155,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:156,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:157,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:158,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:159,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:160,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:161,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:162,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:163,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:164,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:165,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:166,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},o($V_,[2,95]),o($V_,[2,96]),{33:[1,167],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},o($V11,[2,97],{45:$VJ,46:$VK}),o($V11,[2,98],{45:$VJ,46:$VK}),{8:$Vp,9:170,10:[1,168],30:$Vq,32:$Vr,36:169,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:171,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{10:[1,172],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{10:[1,173]},{8:$Vp,9:174,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:175,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:176,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:177,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:178,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:179,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{30:[1,180]},{8:$Vp,9:181,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{33:[1,182]},{11:[1,183]},{11:[1,184]},{8:$Vp,9:185,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{31:[1,186],32:[1,187]},{29:188,42:[1,189],63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($Vj,[2,38]),{40:[1,190],41:191,50:$Vo},{29:192,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{11:[2,69]},o($V21,[2,43]),{41:193,50:$Vo},{8:$Vp,9:194,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},o($V01,[2,64]),{41:195,50:$Vo},{8:$Vp,9:196,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:197,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{50:[1,198]},{11:[2,70]},{10:[1,199]},o($V31,[2,79],{45:$VJ,46:$VK,70:$VN,71:$VO,72:$VP,73:$VQ}),o($V31,[2,80],{45:$VJ,46:$VK,70:$VN,71:$VO,72:$VP,73:$VQ}),o($V41,[2,81],{45:$VJ,46:$VK,71:$VO}),o($V41,[2,82],{45:$VJ,46:$VK}),o($V41,[2,83],{45:$VJ,46:$VK,71:$VO}),o($V41,[2,84],{45:$VJ,46:$VK,71:$VO}),o($V51,[2,85],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ}),o($V51,[2,86],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ}),o($V51,[2,87],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ}),o($V51,[2,88],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ}),o($V51,[2,89],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ}),o($V51,[2,90],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ}),o([10,11,33,38,40,80,81,82],[2,91],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW}),o([10,11,33,38,40,81,82],[2,92],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX}),{40:[1,200],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},o($V_,[2,94]),o($V_,[2,102]),{10:[1,201],38:$V61},o($V71,[2,121],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ}),{33:[1,203],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},o($V_,[2,110]),{8:$Vp,9:204,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{10:[1,205],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{10:[1,206],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{10:[1,207],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{10:[1,208],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{10:[1,209],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{10:[1,210],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},o($V$,[2,33],{31:[1,211]}),{11:[2,24],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{31:[1,212],32:[1,213]},o($Vj,[2,4]),o($Vj,[2,5]),o($V$,[2,32],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ}),{8:$Vp,9:214,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:$Vp,9:215,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{41:216,50:$Vo},{41:217,50:$Vo},{29:218,42:[1,219],63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($Vj,[2,41]),{30:[1,220]},o($Vj,[2,50],{48:[1,221]}),{10:[1,222],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},o($Vj,[2,61]),{11:[1,223],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{11:[1,224],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{51:225,52:[1,226],55:[1,227]},{11:[2,71]},{8:$Vp,9:228,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},o($V_,[2,103]),{8:$Vp,9:229,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},o($V_,[2,104],{32:[1,230]}),o($V41,[2,111],{45:$VJ,46:$VK,71:$VO}),o($V_,[2,112]),o($V_,[2,113]),o($V_,[2,114]),o($V_,[2,115]),o($V_,[2,116]),o($V_,[2,117]),{8:$Vp,9:231,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{32:[1,234],34:[1,232],35:233,39:[1,235]},{33:[1,236]},o($VH,[2,46],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ}),{33:[1,237],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},o($Vj,[2,36]),o($Vj,[2,37]),{41:238,50:$Vo},{41:239,50:$Vo},o($V21,[2,42]),{15:241,41:240,47:$V8,50:$Vo},{11:[2,60]},{14:242,30:$VI},{14:243,30:$VI},{52:[1,244],53:[1,245],55:[1,246]},{40:[1,247]},{8:$Vp,9:248,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},o([10,11,33,38,40],[2,93],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ}),o($V71,[2,120],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ}),{8:$Vp,9:249,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},o($V$,[2,34],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ}),{29:250,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{11:[2,27]},{8:$Vp,9:170,30:$Vq,32:$Vr,36:251,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{8:[1,252]},{31:[1,253]},{31:[1,254]},o($Vj,[2,39]),o($Vj,[2,40]),o($Vj,[2,51]),o($Vj,[2,52]),{10:[1,255]},{10:[1,256]},{40:[1,257]},o($Vj,[2,54]),{8:$Vp,9:258,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{2:$V0,4:259,6:3,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,47:$V8,49:$V9,56:$Va,57:$Vb,58:$Vc,61:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{40:[1,260],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{33:[1,261],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{32:[1,262]},{33:[1,263],38:$V61},{8:$Vp,9:264,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{32:[1,266],34:[1,265]},{8:$Vp,9:267,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{41:268,50:$Vo},{41:269,50:$Vo},{2:$V0,4:270,6:3,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,47:$V8,49:$V9,56:$Va,57:$Vb,58:$Vc,61:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{40:[1,271],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{2:$V0,6:37,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,47:$V8,49:$V9,53:[1,272],56:$Va,57:$Vb,58:$Vc,61:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{2:$V0,4:273,6:3,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,47:$V8,49:$V9,56:$Va,57:$Vb,58:$Vc,61:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($V_,[2,105]),{8:$Vp,9:274,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{11:[2,28]},{10:[1,275],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{29:276,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{32:[1,278],37:277},o($VH,[2,47],{45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ}),o($Vj,[2,62]),o($Vj,[2,63]),{2:$V0,6:37,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,47:$V8,49:$V9,53:[1,279],56:$Va,57:$Vb,58:$Vc,61:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},{2:$V0,4:280,6:3,7:$V1,12:$V2,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:$V3,21:$V4,22:15,23:16,24:$V5,25:18,26:$V6,27:20,28:21,29:30,30:$V7,47:$V8,49:$V9,56:$Va,57:$Vb,58:$Vc,61:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi},o($Vj,[2,55]),o($V81,[2,58],{13:6,14:7,15:8,16:9,17:10,18:11,19:12,22:15,23:16,25:18,27:20,28:21,29:30,6:37,2:$V0,7:$V1,12:$V2,20:$V3,21:$V4,24:$V5,26:$V6,30:$V7,47:$V8,49:$V9,56:$Va,57:$Vb,58:$Vc,61:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi}),{33:[1,281],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{11:[2,35]},{32:[1,282]},{33:[1,283],38:[1,284]},{8:$Vp,9:170,30:$Vq,32:$Vr,36:285,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},o($Vj,[2,53]),o($V81,[2,59],{13:6,14:7,15:8,16:9,17:10,18:11,19:12,22:15,23:16,25:18,27:20,28:21,29:30,6:37,2:$V0,7:$V1,12:$V2,20:$V3,21:$V4,24:$V5,26:$V6,30:$V7,47:$V8,49:$V9,56:$Va,57:$Vb,58:$Vc,61:$Vd,63:$Ve,64:$Vf,65:$Vg,66:$Vh,67:$Vi}),{11:[2,26]},{8:$Vp,9:286,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},{11:[2,30]},{32:[1,287]},{33:[1,288],38:$V61},{33:[1,289],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{8:$Vp,9:170,30:$Vq,32:$Vr,36:290,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},o($V91,[2,119]),{32:[1,291]},{33:[1,292],38:$V61},{8:$Vp,9:293,30:$Vq,32:$Vr,69:$Vs,83:$Vt,84:$Vu,85:$Vv,86:$Vw,87:$Vx,88:$Vy,89:$Vz,90:$VA,91:$VB,92:$VC,93:$VD,94:$VE,95:$VF},o($V91,[2,118]),{33:[1,294],45:$VJ,46:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU,78:$VV,79:$VW,80:$VX,81:$VY,82:$VZ},{11:[2,29]}],
defaultActions: {21:[2,23],36:[2,1],141:[2,69],150:[2,70],199:[2,71],222:[2,60],233:[2,27],263:[2,28],275:[2,35],281:[2,26],283:[2,30],294:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {TablaErrores} = require('./Estructuras/ManejoErrores/TablaErrores.js') ;
    const {_Error} = require('./Estructuras/ManejoErrores/_Error.js') ;
    
    
    var cadena =""
    var tipo_variable = ""
    function AST_Node(name, value, tipo,entorno, fila, columna ){
        this.name = name;
        this.value = value;
        this.tipo = tipo;
        this.entorno = entorno;
        this.fila = fila;
        this.columna = columna;

        this.hijos =[];
        this.addHijos = addHijos;    
        this.getHermano = getHermano;

        function addHijos(){
            for(var i=0; i<arguments.length; i++){
                this.hijos.push(arguments[i]);
                if(arguments[i == null]){
                    arguments[i].padre.this;
                }
            }
        }
        function getHermano(pos){
            if(pos>this._hijos.length-1) return null;
            return this._hijos[pos];
        }
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*comentario de linea*/
break;
case 1:/*comentario de BODY*/
break;
case 2:
break;
case 3:return 45;
break;
case 4:return 68;
break;
case 5:return 46;
break;
case 6:return 69;
break;
case 7:return 70;
break;
case 8:return 72;
break;
case 9:return 71;
break;
case 10:return 73;
break;
case 11:return 78
break;
case 12:return 79
break;
case 13:return 76
break;
case 14:return 77
break;
case 15:return 31
break;
case 16:return 74
break;
case 17:return 75
break;
case 18:return 82
break;
case 19:return 81
break;
case 20:return 80
break;
case 21:return 83
break;
case 22:return 8
break;
case 23:return 10
break;
case 24:return 11
break;
case 25:return 40
break;
case 26:return 32
break;
case 27:return 33
break;
case 28:return 50
break;
case 29:return 53
break;
case 30:return 38
break;
case 31:return 'punto'
break;
case 32:return 63
break;
case 33:return 67
break;
case 34:return 65
break;
case 35:return 66
break;
case 36:return 88
break;
case 37:return 89
break;
case 38:return 64
break;
case 39:return 34
break;
case 40:return 20
break;
case 41:return 21
break;
case 42:return 26
break;
case 43:return 57
break;
case 44:return 58
break;
case 45:return 56
break;
case 46:return 42
break;
case 47:return 12
break;
case 48:return 7
break;
case 49:return 91
break;
case 50:return 92
break;
case 51:return 93
break;
case 52:return 94
break;
case 53:return 95
break;
case 54:return 90
break;
case 55:return 39
break;
case 56:return 61
break;
case 57:return 47
break;
case 58:return 48
break;
case 59:return 49
break;
case 60:return 55
break;
case 61:return 52
break;
case 62:
break;
case 63:
break;
case 64:return 30;
break;
case 65:return 87;
break;
case 66:return 86;
break;
case 67:cadena="";this.begin("string");
break;
case 68:cadena+=yy_.yytext;
break;
case 69:cadena+="\"";
break;
case 70:cadena+="\n";
break;
case 71:cadena+="\t";
break;
case 72:cadena+="\\";
break;
case 73:cadena+="\'";
break;
case 74:yy_.yytext=cadena; this.popState(); return 84;
break;
case 75: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 85; 
break;
case 76:return 5;
break;
case 77: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        TablaErrores.getInstance().insertarError(new _Error("Lexico","Caracter: \" "+yy_.yytext+"\" no es valido" ,yy_.yylloc.first_line,yy_.yylloc.first_column));
                        return null; 
break;
}
},
rules: [/^(?:\/\/[^\n]*)/i,/^(?:\/\*((^\*)|\*(?!\/))*\*\/)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?::)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:run\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[68,69,70,71,72,73,74],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}